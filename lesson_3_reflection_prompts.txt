When would you want to use a remote repository rather than keeping all your work local?

  	There are a lot of reasons, really.  One would be that you are working with a group
  	and everyone needs access to the updated files at all times (and the ability to 
  	share their changes).  Another reason would be that you make changes on multiple
  	computers, or need the option to easily continue a project on a new computer.  Also, 
  	the remote repository is a good backup if something breaks with your local repository.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	I like that you have control over what goes in to either repo, remote or local.  If
	Git did it automatically, it may happen at a time when you aren't ready to have the
	changes in the remote added.  I can't really think of many examples where this would
	be the case, just from lack of experience, but I do know that erring on the side of
	caution is most likely the best route for these situations.  Ultimately, I am in 
	control of my files and my repos, not Git, and that's how I'd want it.	

Describe the differences between forks, clones, and branches.  When would you use one
instead of another?

	Cloning is primarily a way to get a repo on your local system to work with.  A fork
	is a clone that points back to the original repo and allows you to work on your own
	changes.  With a fork you can also suggest some of your changes for the original.  A
	branch is more unrelated to clones and forks.  It is merely an alternative path to
	make changes but not necessarily commit them to the master branch yet.  
	I would use a clone when I just want to check an existing project out, but not
	contribute to it.  A fork is for contributing, or just having a public repo based on
	an existing project, that points back to the original.  Branches are for things like 
	experimental features that you want to keep track of separate from master, at least
	temporarily.

What is the benefit of having a copy of the last known state of the remote stored locally?

	When the last known state of the remote is stored locally, git knows where you are 
	in relation to the remote after every commit.  So git status will easily show you
	how many commits different you are from the last known state of the remote.  Of course,
	there could be changes on the actual remote that your local git may not know of, but at
	least you have an idea of how many changes are pending a push from your end.


